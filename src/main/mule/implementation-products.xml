<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	
	
	<sub-flow name="implementationGetProducts">
	
	<set-variable value="#[attributes.method]" doc:name="httpMethod" doc:id="2c930dff-5b1f-4c24-b055-eeb4b165bc57" variableName="methodName"/>
		<db:select doc:name="selectProducts" doc:id="49241c8b-fc19-439e-8e1f-aa794c903c23" config-ref="Shop_Management_Database_Config">
			<db:sql ><![CDATA[SELECT * 
FROM products]]></db:sql>
		</db:select>
		<ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" doc:name="setProductsPayload">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map (product, index) ->{
	productId:product.product_id,
	name:product.name,
	price:product.price,
	quantity:product.quantity
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
	
	</sub-flow>
	<sub-flow name="implementationGetProductById">
		<set-variable value="#[attributes.method]" doc:name="httpMethod" doc:id="26f26eb4-5d7f-42ca-bddf-78ec0e944a4f" variableName="methodName"/>
		<set-variable value="#[message.attributes.uriParams.productId]" doc:name="productId" doc:id="592d7293-c041-4090-be93-1b286b1b0aaf" variableName="productId"/>
		<db:select doc:name="selectProductById" doc:id="fd0cce34-4c31-4289-be03-cea7b5b8b0a0" config-ref="Shop_Management_Database_Config">
			<db:sql ><![CDATA[SELECT * 
FROM products
WHERE product_id = :product_id]]></db:sql>
			<db:input-parameters ><![CDATA[#[{'product_id' : vars.productId}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="71c2a47e-955a-46aa-bc28-4d05b0de9350" >
			<when expression="#[payload[0] != null]">
				<ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" doc:name="setProdcutPayload">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map (product, index) ->{
	productId:product.product_id,
	name:product.name,
	price:product.price,
	quantity:product.quantity
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="setError404" doc:id="b2f0fb50-5af9-45e8-9196-938db75f2c8e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "code": 404,
  "message": "Not found"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[404]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="implementationPostProduct">
		<set-variable value="#[attributes.method]" doc:name="httpMethod" doc:id="ce9a6c8b-b541-439f-8e67-e05ae968e7a7" variableName="methodName"/>
		<db:insert doc:name="insertProduct" doc:id="f85108f4-ad75-4d1b-8c30-f3084c935af7" config-ref="Shop_Management_Database_Config">
			<db:sql><![CDATA[INSERT INTO products (name, price, quantity) 
VALUES (:name, :price, :quantity);]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	name : payload.name,
	price : payload.price,
	quantity: payload.quantity
}]]]></db:input-parameters>
		</db:insert>
		<db:select doc:name="selectProduct" doc:id="857ae30c-d4f6-43f9-b7e3-3a3444c60fa4" config-ref="Shop_Management_Database_Config">
			<db:sql ><![CDATA[SELECT * 
FROM products
WHERE product_id=(select last_insert_id())]]></db:sql>
		</db:select>
		<ee:transform xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" doc:name="setProductPayload">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map (product, index) ->{
	productId:product.product_id,
	name:product.name,
	price:product.price,
	quantity:product.quantity
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
	</sub-flow>
	<sub-flow name="implementationUpdateProduct">
		<set-variable value="#[attributes.method]" doc:name="httpMethod" doc:id="dac4ce69-ab2d-46a5-9ba6-ff5bdf500413" variableName="methodName"/>
		<set-variable value="#[attributes.uriParams.productId]" doc:name="productId" doc:id="3e55701b-92d1-4a57-97bf-995c8c5d2302" variableName="productId"/>
		<db:update doc:name="updateProduct" doc:id="9296b8e0-3fd3-4ac9-8f81-d2f11fef16bb" config-ref="Shop_Management_Database_Config">
			<db:sql ><![CDATA[UPDATE products 
SET name = :name, price = :price, quantity = :quantity 
WHERE product_id = :product_id]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	product_id : vars.productId,
	name : payload.name,
	price : payload.price,
	quantity : payload.quantity
}]]]></db:input-parameters>
		</db:update>
		<db:select doc:name="selectProduct" doc:id="323508c5-7532-4e71-ace0-bc9e0297f97f" config-ref="Shop_Management_Database_Config">
			<db:sql ><![CDATA[SELECT * 
FROM products 
WHERE product_id = :product_id]]></db:sql>
			<db:input-parameters ><![CDATA[#[{'product_id' : vars.productId}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="2bcf62d6-bb50-4dfa-b0de-3854d20d45ff" >
			<when expression="#[payload[0] != null]">
				<ee:transform xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" doc:name="setProductPayload">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map (product, index) ->{
	"Status":200,
	"message":"Updated",
	productId:product.product_id,
	name:product.name,
	price:product.price,
	quantity:product.quantity
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="setError404" doc:id="7760e171-8ffa-4b26-b384-22c364f151d0">
					<ee:message>
						<ee:set-payload><![CDATA[output application/json
---
{
  "code": 404,
  "message": "Not found"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[404]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="implementationDeleteProduct">
		<set-variable value="#[attributes.method]" doc:name="httpMethod" doc:id="19aa4389-40fe-4fa8-b251-ef171a4c2944" variableName="methodName"/>
		<set-variable value="#[message.attributes.uriParams.productId]" doc:name="prodcutId" doc:id="c789b2b8-2dac-4d50-9926-a814fe35aed7" variableName="productId"/>
		<db:select doc:name="selectProductById" doc:id="fe15f2f1-5ae9-42c5-8bf6-bf8a39ea6339" config-ref="Shop_Management_Database_Config">
			<db:sql ><![CDATA[SELECT * 
FROM products
WHERE product_id = :product_id]]></db:sql>
			<db:input-parameters ><![CDATA[#[{'product_id' : vars.productId}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="f4a88f60-9200-4a48-b9b9-05c25c9a162f" >
			<when expression="#[payload[0] != null]">
				<flow-ref doc:name="deleteProductIfExistsFlow" doc:id="fa4c20fe-43ae-45ac-b9a9-9ac0e619d9de" name="implementationDeleteProductIfExists"/>
			</when>
			<otherwise >
				<flow-ref doc:name="throw404Flow" doc:id="a3d3db94-7370-440d-868e-440334a5f217" name="implementationThrow404"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="implementationDeleteProductIfExists" doc:id="37124231-a48a-4709-a6cc-ddc099c42457" >
		<db:delete doc:name="deleteProduct" doc:id="45df7a7f-1b34-4827-9fc4-ae11c9391a85" config-ref="Shop_Management_Database_Config">
			<db:sql><![CDATA[DELETE FROM products WHERE product_id = :product_id]]></db:sql>
			<db:input-parameters><![CDATA[#[{'product_id' : vars.productId}]]]></db:input-parameters>
		</db:delete>
		<ee:transform doc:name="setProductPayload" doc:id="dcc3f77c-2e50-4176-82bb-25c8a2530411">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"code": 204,
	"message": "Deleted"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables>
						<ee:set-variable variableName="httpStatus"><![CDATA[204]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
	</sub-flow>
	<sub-flow name="implementationThrow404" doc:id="e79ead03-4435-4b1f-b030-1af16146f667" >
		<ee:transform doc:name="setError404" doc:id="eb65cb69-fbaa-416b-b281-3afc5c9f88e1" >
			<ee:message >
				<ee:set-payload ><![CDATA[output application/json
---
{
  "code": 404,
  "message": "Not found"
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[404]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</sub-flow>
	</mule>
